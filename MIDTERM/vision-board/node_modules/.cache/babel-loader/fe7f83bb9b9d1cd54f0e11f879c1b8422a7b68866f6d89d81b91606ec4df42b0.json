{"ast":null,"code":"var _jsxFileName = \"/Users/scarl/Desktop/SCHOOL/NYU/25F Dynamic Web/DynamicWeb/MIDTERM/vision-board/src/VisionBoardContext.js\",\n  _s = $RefreshSig$();\nimport { createContext, useState, useContext } from \"react\";\n\n// useContext() allows you data sharing cross the component tree\n// https://react.dev/learn/passing-data-deeply-with-context\n//\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const VisionBoardContext = /*#__PURE__*/createContext();\n// creates an empty \"container\" to hold shared data\n\n// this provider component will wrap the app\n// everything wrapped by the provide can access the context states\nexport const VisionBoardProvider = ({\n  children\n}) => {\n  _s();\n  // ---- all the state management logic lives here\n\n  // an array to store faved images\n  const [favs, setFavs] = useState([]);\n  // a state for search results\n  const [searchResults, setSearchResults] = useState([]);\n\n  // ---- moved these functions from App.js to here\n\n  // checks if image is in the array\n  // https://www.w3schools.com/jsref/jsref_some.asp\n  // returns boolean\n  const isInFavs = imageId => {\n    return favs.some(item => item.id === imageId);\n  };\n\n  // function to add/remove images\n  const toggleFav = image => {\n    // check if image is in favs\n\n    if (isInFavs(image.id)) {\n      // keep everything except the image unfavorited\n      const newFavs = favs.filter(item => item.id !== image.id);\n      setFavs(newFavs);\n    } else {\n      // copy all old items and add new image\n      const newFavs = [image, ...favs];\n      setFavs(newFavs);\n    }\n  };\n\n  // new function to handle reordering\n  const moveImage = (dragIndex, hoverIndex) => {\n    const newFavs = [...favs];\n    const draggedImage = newFavs[dragIndex];\n\n    // remove the dragged item from its original position\n    newFavs.splice(dragIndex, 1);\n    // insert it at the new position\n    newFavs.splice(hoverIndex, 0, draggedImage);\n    setFavs(newFavs);\n  };\n\n  // the value object will contain everything to share\n  const value = {\n    favs,\n    setFavs,\n    searchResults,\n    setSearchResults,\n    isInFavs,\n    toggleFav\n  };\n  return (\n    /*#__PURE__*/\n    // .Provider is a special component that comes with every context\n    // value={value} loads the data into the provider, making them accessible to any child component\n    _jsxDEV(VisionBoardContext.Provider, {\n      value: value,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }, this)\n  );\n};\n_s(VisionBoardProvider, \"rrCcYAMy4s5ROrEHUbHGrn4rHD0=\");\n_c = VisionBoardProvider;\nvar _c;\n$RefreshReg$(_c, \"VisionBoardProvider\");","map":{"version":3,"names":["createContext","useState","useContext","jsxDEV","_jsxDEV","VisionBoardContext","VisionBoardProvider","children","_s","favs","setFavs","searchResults","setSearchResults","isInFavs","imageId","some","item","id","toggleFav","image","newFavs","filter","moveImage","dragIndex","hoverIndex","draggedImage","splice","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/scarl/Desktop/SCHOOL/NYU/25F Dynamic Web/DynamicWeb/MIDTERM/vision-board/src/VisionBoardContext.js"],"sourcesContent":["import { createContext, useState, useContext } from \"react\";\n\n// useContext() allows you data sharing cross the component tree\n// https://react.dev/learn/passing-data-deeply-with-context\n//\n\nexport const VisionBoardContext = createContext();\n// creates an empty \"container\" to hold shared data\n\n// this provider component will wrap the app\n// everything wrapped by the provide can access the context states\nexport const VisionBoardProvider = ({ children }) => {\n  // ---- all the state management logic lives here\n\n  // an array to store faved images\n  const [favs, setFavs] = useState([]);\n  // a state for search results\n  const [searchResults, setSearchResults] = useState([]);\n\n  // ---- moved these functions from App.js to here\n\n  // checks if image is in the array\n  // https://www.w3schools.com/jsref/jsref_some.asp\n  // returns boolean\n  const isInFavs = (imageId) => {\n    return favs.some((item) => item.id === imageId);\n  };\n\n  // function to add/remove images\n  const toggleFav = (image) => {\n    // check if image is in favs\n\n    if (isInFavs(image.id)) {\n      // keep everything except the image unfavorited\n      const newFavs = favs.filter((item) => item.id !== image.id);\n      setFavs(newFavs);\n    } else {\n      // copy all old items and add new image\n      const newFavs = [image, ...favs];\n      setFavs(newFavs);\n    }\n  };\n\n  // new function to handle reordering\n  const moveImage = (dragIndex, hoverIndex) => {\n    const newFavs = [...favs];\n    const draggedImage = newFavs[dragIndex];\n\n    // remove the dragged item from its original position\n    newFavs.splice(dragIndex, 1);\n    // insert it at the new position\n    newFavs.splice(hoverIndex, 0, draggedImage);\n\n    setFavs(newFavs);\n  };\n\n  // the value object will contain everything to share\n  const value = {\n    favs,\n    setFavs,\n    searchResults,\n    setSearchResults,\n    isInFavs,\n    toggleFav,\n  };\n\n  return (\n    // .Provider is a special component that comes with every context\n    // value={value} loads the data into the provider, making them accessible to any child component\n    <VisionBoardContext.Provider value={value}>\n      {children}\n    </VisionBoardContext.Provider>\n  );\n};\n"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,QAAQ,EAAEC,UAAU,QAAQ,OAAO;;AAE3D;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,OAAO,MAAMC,kBAAkB,gBAAGL,aAAa,CAAC,CAAC;AACjD;;AAEA;AACA;AACA,OAAO,MAAMM,mBAAmB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACnD;;EAEA;EACA,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACpC;EACA,MAAM,CAACU,aAAa,EAAEC,gBAAgB,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;;EAEtD;;EAEA;EACA;EACA;EACA,MAAMY,QAAQ,GAAIC,OAAO,IAAK;IAC5B,OAAOL,IAAI,CAACM,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKH,OAAO,CAAC;EACjD,CAAC;;EAED;EACA,MAAMI,SAAS,GAAIC,KAAK,IAAK;IAC3B;;IAEA,IAAIN,QAAQ,CAACM,KAAK,CAACF,EAAE,CAAC,EAAE;MACtB;MACA,MAAMG,OAAO,GAAGX,IAAI,CAACY,MAAM,CAAEL,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKE,KAAK,CAACF,EAAE,CAAC;MAC3DP,OAAO,CAACU,OAAO,CAAC;IAClB,CAAC,MAAM;MACL;MACA,MAAMA,OAAO,GAAG,CAACD,KAAK,EAAE,GAAGV,IAAI,CAAC;MAChCC,OAAO,CAACU,OAAO,CAAC;IAClB;EACF,CAAC;;EAED;EACA,MAAME,SAAS,GAAGA,CAACC,SAAS,EAAEC,UAAU,KAAK;IAC3C,MAAMJ,OAAO,GAAG,CAAC,GAAGX,IAAI,CAAC;IACzB,MAAMgB,YAAY,GAAGL,OAAO,CAACG,SAAS,CAAC;;IAEvC;IACAH,OAAO,CAACM,MAAM,CAACH,SAAS,EAAE,CAAC,CAAC;IAC5B;IACAH,OAAO,CAACM,MAAM,CAACF,UAAU,EAAE,CAAC,EAAEC,YAAY,CAAC;IAE3Cf,OAAO,CAACU,OAAO,CAAC;EAClB,CAAC;;EAED;EACA,MAAMO,KAAK,GAAG;IACZlB,IAAI;IACJC,OAAO;IACPC,aAAa;IACbC,gBAAgB;IAChBC,QAAQ;IACRK;EACF,CAAC;EAED;IAAA;IACE;IACA;IACAd,OAAA,CAACC,kBAAkB,CAACuB,QAAQ;MAACD,KAAK,EAAEA,KAAM;MAAApB,QAAA,EACvCA;IAAQ;MAAAsB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACkB;EAAC;AAElC,CAAC;AAACxB,EAAA,CA9DWF,mBAAmB;AAAA2B,EAAA,GAAnB3B,mBAAmB;AAAA,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}