{"ast":null,"code":"var _jsxFileName = \"/Users/scarl/Desktop/SCHOOL/NYU/25F Dynamic Web/DynamicWebClassNotes/Midterm/vision-board/src/components/NavBar.js\";\nimport { Link, NavLink } from \"react-router-dom\";\nimport cx from \"classnames\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Navbar = () => {\n  /*\n    V6+ of React Router changed the way NavLinks work. You used to have access to a var you didn't make called IsActive\n    Now we need to write an inline checker function\n    Here is how to style NavLink with Tailwind and the new version of React Router and Remix\n    */\n\n  //define our base class & our active class as js ver\n  const baseClass = \"py-2 px-4 text-slate-400 w-32\";\n  const activeClass = \"py-2 px-4 text-white bg-black drop-shadow-md rounded-full w-32 content-center\";\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sticky text-center bg-slate-100 rounded-full pb-8 top-0 overflow-y-scroll flex flex-row items-center justify-center\",\n    children: [/*#__PURE__*/_jsxDEV(NavLink, {\n      to: \"/\",\n      className: ({\n        isActive\n      }) =>\n      // isActive is a prop we get for free from NavLink\n      //({isActive}) => {} is like  (props) => {const {isActive}} =\n      //now we have isActive destructured out of our props we get\n      //use a ternary to apply base or active class\n      //conditionToCheck ? return this is true : else do this\n\n      isActive ? activeClass : baseClass,\n      children: \"Search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NavLink, {\n      to: \"/favorites\",\n      className: ({\n        isActive\n      }) => isActive ? activeClass : baseClass,\n      children: \"Favorites\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this);\n};\n_c = Navbar;\nexport default Navbar;\nvar _c;\n$RefreshReg$(_c, \"Navbar\");","map":{"version":3,"names":["Link","NavLink","cx","jsxDEV","_jsxDEV","Navbar","baseClass","activeClass","className","children","to","isActive","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/scarl/Desktop/SCHOOL/NYU/25F Dynamic Web/DynamicWebClassNotes/Midterm/vision-board/src/components/NavBar.js"],"sourcesContent":["import { Link, NavLink } from \"react-router-dom\";\nimport cx from \"classnames\";\n\nconst Navbar = () => {\n  /*\n    V6+ of React Router changed the way NavLinks work. You used to have access to a var you didn't make called IsActive\n    Now we need to write an inline checker function\n    Here is how to style NavLink with Tailwind and the new version of React Router and Remix\n    */\n\n  //define our base class & our active class as js ver\n  const baseClass = \"py-2 px-4 text-slate-400 w-32\";\n  const activeClass =\n    \"py-2 px-4 text-white bg-black drop-shadow-md rounded-full w-32 content-center\";\n\n  return (\n    <div className=\"sticky text-center bg-slate-100 rounded-full pb-8 top-0 overflow-y-scroll flex flex-row items-center justify-center\">\n      <NavLink\n        to=\"/\"\n        className={({ isActive }) =>\n          // isActive is a prop we get for free from NavLink\n          //({isActive}) => {} is like  (props) => {const {isActive}} =\n          //now we have isActive destructured out of our props we get\n          //use a ternary to apply base or active class\n          //conditionToCheck ? return this is true : else do this\n\n          isActive ? activeClass : baseClass\n        }\n      >\n        Search\n      </NavLink>\n\n      <NavLink\n        to=\"/favorites\"\n        className={({ isActive }) => (isActive ? activeClass : baseClass)}\n      >\n        Favorites\n      </NavLink>\n    </div>\n  );\n};\n\nexport default Navbar;\n"],"mappings":";AAAA,SAASA,IAAI,EAAEC,OAAO,QAAQ,kBAAkB;AAChD,OAAOC,EAAE,MAAM,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5B,MAAMC,MAAM,GAAGA,CAAA,KAAM;EACnB;AACF;AACA;AACA;AACA;;EAEE;EACA,MAAMC,SAAS,GAAG,+BAA+B;EACjD,MAAMC,WAAW,GACf,+EAA+E;EAEjF,oBACEH,OAAA;IAAKI,SAAS,EAAC,qHAAqH;IAAAC,QAAA,gBAClIL,OAAA,CAACH,OAAO;MACNS,EAAE,EAAC,GAAG;MACNF,SAAS,EAAEA,CAAC;QAAEG;MAAS,CAAC;MACtB;MACA;MACA;MACA;MACA;;MAEAA,QAAQ,GAAGJ,WAAW,GAAGD,SAC1B;MAAAG,QAAA,EACF;IAED;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAS,CAAC,eAEVX,OAAA,CAACH,OAAO;MACNS,EAAE,EAAC,YAAY;MACfF,SAAS,EAAEA,CAAC;QAAEG;MAAS,CAAC,KAAMA,QAAQ,GAAGJ,WAAW,GAAGD,SAAW;MAAAG,QAAA,EACnE;IAED;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAS,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACP,CAAC;AAEV,CAAC;AAACC,EAAA,GArCIX,MAAM;AAuCZ,eAAeA,MAAM;AAAC,IAAAW,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}